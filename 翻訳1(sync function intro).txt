http://developer.couchbase.com/mobile/develop/guides/sync-gateway/sync-function-api-guide/intro/index.html

イントロダクション
^^^^^^^^^^^^^^^^^^^^
sync functionは、Sync Gateway上であなたがやりとりするコアなAPIです。簡単なアプリケーションでは、あなたが書かなくてはならない唯一のサーバー側コードになるかも知れません。より複雑なアプリケーションでは、データ管理やアクセス制御のための最初の接点にすぎません。

sync functionはJavaScriptの関数で、ソースコードはSync Gatewayのデータベース設定ファイルに保存されます。新しいドキュメント、リビジョン、または削除がデータベースに追加されるたびにsync functionが呼ばれ、ドキュメントをチェックする機会が与えられます。以下のことを行えます：

・ドキュメントの検証：もしドキュメントが無効な内容を含んでいたら、sync functionは例外をスローし破棄することが出来ます。ドキュメントがデータベースに追加されることはなく、クライアントはエラー応答を受け取ります。

・ドキュメントの変更承認：sync functionはrequireUser関数やrequireRole関数を呼び、どのユーザー（達）がドキュメントの変更を許可されているかを特定することが出来ます。もし変更を加えるユーザーが許可されたリストにいない場合、例外がスローされて更新はエラーとともに破棄されます。同様に、requireChannels関数は変更を行うユーザーがどのチャネルにもアクセス出来ることを要求します。

・ドキュメントのチャネル割り当て：ドキュメントの内容に基づき、sync functionはchannel関数を呼び出し、ドキュメントを一つ以上のチャネルに加えることが出来ます。これにより、それらのチャネルへのアクセスを有するユーザーがドキュメントにアクセス出来るようになり、そのチャネルに登録しているクライアントによってそのドキュメントが取得されるようになります。

・ユーザーへのチャネルアクセス権付与：access(user, channel) 関数を呼ぶことでユーザーにチャネルへのアクセス権を付与します。これにより、ドキュメントがメンバーシップリストまたはアクセス制御リストとしての役割を果たすようになります。

◯注意：sync functionはあなたのアプリケーションにとって極めて重要です。データ検証やドキュメントへの読み書き許可の認証を担当します。APIはハイレベルで、それを用いれば強力なことをシンプルに行うことが出来ますが、脅威を検知したり不正アクセスを防いだりすることを確かめるために、十分注意して関数を見直す必要があります。あなたのアプリケーションのセキュリティレビューは、sync functionに焦点を置くべきです。

Sync function構造
---------------------------
sync functionはJavaScriptで書きます。sync functionの基本構造は以下のようになります：
function (doc, oldDoc) {
    // あなたのコード
}

sync functionの引数：
・doc：保存されるドキュメントの内容を表すオブジェクト。これは、モバイルクライアントによって保存され、Sync Gatewayに複製されたJSONに一致します。_idプロパティはドキュメントIDを、_revプロパティは新リビジョンIDを含みます。ドキュメントが削除される場合は、_deletedプロパティがtrueになります。
・oldDoc：もしドキュメントが以前に保存されていた場合、以前のリビジョンはこの引数の中で手に入れることができます。保存されていなかった場合はnullになります。（競合のあるドキュメントの場合、現在の暫定的なwinningリビジョンがoldDocに渡されます。）もし必要なければ、sync functionの実装の中で、oldDocパラメータを省くことが出来ます。（JavaScriptは、関数に渡された余分なパラメータは無視します）

sync functionとドキュメントリビジョン
------------------------------------------------------
sync functionがドキュメントリビジョンとどのようにやり取りを行うかを理解することが大事です。

sync functionは、ドキュメントに対して新しいリビジョン／更新がなされるたびに呼ばれ、sync functionによってなされるチャネルやアクセスへの変更はそのリビジョンに結びつけられます。もしドキュメントが更新されたら、新たなリビジョンに対してsync functionが再び呼ばれ、新たなチャネル割当やユーザー／チャネルアクセスが行われます。

◯注釈
ルーティングの変更は、ドキュメントが実際にデータベースに保存されるまでは行われません。したがって、sync functionが始めにchannel関数やaccess関数を呼び出したものの、更新が破棄された場合には、チャネルやアクセスの変更は行われません。

ドキュメントの削除は更新です！削除は、単にドキュメント本体に_deletedプロパティ（値はtrue）を含む新しいリビジョンです。sync functionは削除時に呼ばれます。ほとんどの場合、削除リビジョンの時は_deleted以外のプロパティを含みません。その場合、sync functionはおそらくチャネルもアクセスも割り当てることはしないでしょう。しかし、クライアントが_deleted以外のプロパティを含んだ削除リビジョンを作成することは可能です。その場合、sync functionは明示的に_deletedに対してのテストを行う必要があるかもしれません。

もしドキュメントが競合状態にある場合、複数のカレントリビジョンが存在することになるでしょう。デフォルトでは"winning"リビジョンはチャネル割当やアクセス付与が有効なリビジョンになります。

Default sync function
-----------------------------
もしあなたがsync functionを提供しなかった場合、Sync Gatewayは以下のdefault sync functionを用います：

function (doc) {
   channel(doc.channels);
}

簡単に言うと、デフォルトでは、ドキュメントはchannelsプロパティにリスト化されているチャネル（値は文字列もしくは文字列の配列でなくてはならない）に割り当てられます。より微妙な言い方をすると、検証機能がないのでどんなユーザーでもどんなドキュメントをも変更することが出来ます。そのため、default sync functionは実験や開発のためにだけ本当に有用なものになります。

sync functionを変更する
-----------------------------------
データベースのsync functionを変更するには、単純に設定ファイルのfunction定義を編集し、そのあとSync Gatewayを再起動するだけです。（もしくは、再起動の代わりにREST APIを用いて、データベースのdeleteとcreateをすることも出来ます）

sync functionを変更することはコストのかかる処理です。なぜなら、チャネルやアクセスの割り当てを更新するためにはデータベースの中の全てのドキュメントがその新しいsync functionによって処理されなければならないからです。これがデータベースの稼働中に発生し、この処理が完了するまでデータベースは何の要求も受け付けられなくなります（全てのドキュメントがスキャンされるまで、誰のフルアクセス権も認識されないからです）。それゆえ、更新中はアプリケーションを中断した方が良いかもしれません。

もし更新中のデータベースへのアクセスをする必要がある場合、事前にバケットのバックアップをread-onlyの形で作成し、セカンダリーSync Gateway（変更前のsync function）を起動してアプリケーションで利用します。更新が完了したら、メインのSync Gatewayとバケットに切り替えます。

複数のSync Gatewayから成るクラスター環境下では、全てのGatewayは同じ設定を共有する必要があります。そのため、それらは全て一緒に停止する必要があります。設定を更新した後、データベースを更新するためには、ひとつのインスタンスで行う必要があります。もしこの時２つ以上のインスタンスが動いていると、それらは互いに競合を起こします。最初のインスタンスによるデータベースの更新が完了した時点で、その他のインスタンスをスタートさせることが出来ます。




